#!/bin/bash
#    ___      ___
#   |"  \    /"  | ⊏
#    \   \  //   | ⊓
#    /\   \/.    | ⊐
#   |: \.        | ⊔
#   |.  \    /:  | ⊏
#   |___|\__/|___| ⊓
#

CONF_GLOBAL="$HOME/dotfiles/global.json"
CONF_PRIVATE="$HOME/dotfiles/private.json"

usage () {
    printf "
Usage:   mainctl [module] [function] (opts)

  gamma       [start|stop|toggle] (-s)
    \x1b[38;2;150;150;150mBlue light filter / \"night light\". (-s disables notifications)\x1b[0m

  idle        [start|stop|toggle] (-s)
    \x1b[38;2;150;150;150mDisable displays when the user is idle. (-s disables notifications)\x1b[0m

  gamemode    [start|stop|toggle] (-s)
    \x1b[38;2;150;150;150mDisable gaps, transparency, blur, and shadows. (-s disables notifications)\x1b[0m

  volume      [inc|dec|mute]
    \x1b[38;2;150;150;150mChange audio volume using pactl by 2 procent or mutes it using [mute] function.\x1b[0m

  screenshot  [full|select] (-s)
    \x1b[38;2;150;150;150mCreate screenshot and copies to clipboard. [full] for full screen, [select] for selection only. (-s disables notifications)\x1b[0m

  wallpaper   [next|prev|random]
    \x1b[38;2;150;150;150mSwitch wallpaper from the ~/Pictures/wallpapers folder (alphabetically). [next] for next file, [prev] for previous file, [random] for random file.\x1b[0m

  display
    \x1b[38;2;150;150;150mToggle secondary display on/off.\x1b[0m

  -h | help
    \x1b[38;2;150;150;150mDisplays this information and exits.\x1b[0m

  Examples:\x1b[38;2;150;150;150m
    mainctl wallpaper next    - Switch wallpaper to next in list
    mainctl waybar reload     - Reload waybar configuration and restart
    mainctl gamma start       - Start gammastep service
    mainctl gamemode toggle   - Toggle gamemode on or off depending on current state
    mainctl volume inc        - Increase volume by 2%%
    mainctl screenshot full   - Fullscreen screenshot, copy to clipboard\x1b[0m

"
    exit 0
}


notify () {
	notify-send "$1" "$2"
}

gamma () {
	local cmd

	local lockfile="/tmp/gamma.lock"
	[ -f "$lockfile" ] && exit 0

    touch $lockfile
    trap 'rm -f $lockfile' EXIT

	local notification=("Gammastep")

	_start () {
        pidof -q "gammastep" && exit 0
		run gammastep -t "$(jq '.gammastep.temp_day' "$CONF_GLOBAL"):$(jq '.gammastep.temp_night' "$CONF_GLOBAL")" -l "$(jq '.location.latitude' "$CONF_PRIVATE"):$(jq '.location.longtitude' "$CONF_PRIVATE")"
		cp -f "$CONF_GLOBAL" "$lockfile"
		jq '.toggles.gammastep = true' "$lockfile" > "$CONF_GLOBAL"
		notification+=("Gammastep enabled.")
	}

	_stop () {
        pidof -q "gammastep" || exit 0
		kill "$(pidof gammastep)"
		cp -f "$CONF_GLOBAL" "$lockfile"
		jq '.toggles.gammastep = false' "$lockfile" > "$CONF_GLOBAL"
		notification+=("Gammastep disabled.")
	}

	for cmd in "$@"; do
		case "$cmd" in
			"start") _start ;;
			"stop") _stop ;;
			"toggle")
                if pidof -q gammastep; then
                    _stop
                else
                    _start
                fi ;;
		esac
	done

	[[ "$*" =~ "-s" ]] || notify "${notification[@]}"
	sleep 3
	exit 0
}


idle () {
	local timeout on_idle on_resume cmd
	local notification=("Swayidle")

	_start () {
		pidof -q swayidle && exit 0
		timeout=$(jq '.swayidle.timeout' "$CONF_GLOBAL")
		on_idle=$(jq -r '.swayidle.actions.idle' "$CONF_GLOBAL")
		on_resume=$(jq -r '.swayidle.actions.resume' "$CONF_GLOBAL")
		swayidle timeout "$timeout" "$on_idle" resume "$on_resume" &
		notification+=("Swayidle enabled.")
	}

	_stop () {
		pidof -q swayidle || exit 0
		killall swayidle
		notification+=("Swayidle disabled.")
	}

	for cmd in "$@"; do
		case "$cmd" in
			"start") _start ;;
			"stop") _stop ;;
			"toggle")
                if pidof -q swayidle; then
                    _stop
                else
                    _start
                fi ;;
		esac
	done

	[[ "$*" =~ '-s' ]] || notify "${notification[@]}"
}


gamemode () {
	local cmd

	local lockfile="/tmp/gamemode.lock"
	[ -f "$lockfile" ] && exit 0

    touch $lockfile
    trap 'rm -f $lockfile' EXIT

	local notification=("Gamemode")

	_start () {
		local actions=(
			"keyword decoration:active_opacity 1;"
			"keyword decoration:inactive_opacity 1;"
			"keyword decoration:fullscreen_opacity 1;"
			"keyword decoration:drop_shadow false;"
			"keyword decoration:rounding 0;"
			"keyword decoration:blur:enabled false;"
			"keyword general:gaps_in 0;"
			"keyword general:gaps_out 0;"
		)
		run hyprctl --batch "${actions[@]}"
		mainctl gamma stop -s
		mainctl idle stop -s
		cp -f "$CONF_GLOBAL" "$lockfile"
		jq '.toggles.gamemode = true' "$lockfile" > "$CONF_GLOBAL"
		notification+=("Gamemode enabled.")
	}

	_stop () {
		local c active_opacity inactive_opacity fullscreen_opacity gaps_in gaps_out drop_shadow rounding blur
		
		c=$(jq '.hyprland.decoration' "$CONF_GLOBAL")
		active_opacity=$(jq "$c.active_opacity" "$CONF_GLOBAL")
		inactive_opacity=$(jq "$c.inactive_opacity" "$CONF_GLOBAL")
		fullscreen_opacity=$(jq "$c.fullscreen_opacity" "$CONF_GLOBAL")
		drop_shadow=$(jq "$c.drop_shadow" "$CONF_GLOBAL")
		rounding=$(jq "$c.rounding" "$CONF_GLOBAL")
		blur=$(jq "$c.blur.enabled" "$CONF_GLOBAL")
		local actions=(
			"keyword decoration:active_opacity $active_opacity;"
			"keyword decoration:inactive_opacity $inactive_opacity;"
			"keyword decoration:fullscreen_opacity $fullscreen_opacity;"
			"keyword decoration:drop_shadow $drop_shadow;"
			"keyword decoration:blur:enabled $blur;"
			"keyword decoration:rounding $rounding;"
		)

		c=$(jq '.hyprland.general' "$CONF_GLOBAL")
		gaps_in=$(jq "$c.gaps_in" "$CONF_GLOBAL")
		gaps_out=$(jq "$c.gaps_out" "$CONF_GLOBAL")
		actions+=(
			"keyword general:gaps_in $gaps_in;"
			"keyword general:gaps_out $gaps_out;"
		)

		run hyprctl --batch "${actions[@]}"
		mainctl idle start -s
		cp -f "$CONF_GLOBAL" "$lockfile"
		jq '.toggles.gamemode = false' "$lockfile" > "$CONF_GLOBAL"
		notification+=("Gamemode disabled.")
	}

	for cmd in "$@"; do
		case "$cmd" in
			"start") _start ;;
			"stop") _stop ;;
			"toggle")
                if [ "$(jq -r ".toggles.gamemode" "$CONF_GLOBAL")" = "true" ]; then
			        _stop
                else
                    _start
                fi ;;
		esac
	done

	[[ "$*" =~ '-s' ]] || notify "${notification[@]}"
    sleep 3
    exit 0
}


wallpaper () {
    local current tmpfile cmd

    tmpfile=$(mktemp)
    trap 'rm -f $tmpfile' EXIT

    local folder="$HOME/Pictures/wallpapers"
    local hyprconf="$HOME/dotfiles/hypr/hyprpaper.conf"
    mapfile -t list <<< "$(ls -1 "$folder")"
    current=$(jq -r '.wallpaper' "$CONF_GLOBAL")

    _next () {
        if [ "$current" = "${list[-1]}" ]; then
            new="${list[0]}"
        else
            for (( i=0; i < ${#list[@]}; i++ )); do
                if [ "${list[i]}" = "$current" ]; then
                    ((i++))
                    new="${list[i]}"
                    break
                fi
            done
        fi
    }

    _prev () {
        if [ "$current" = "${list[0]}" ]; then
            new="${list[-1]}"
        else
            for (( i=${#list[@]}; i > 0; i-- )); do
                if [ "${list[i]}" = "$current" ]; then
                    ((i--))
                    new="${list[i]}"
                    break
                fi
            done
        fi
    }

    _random () {
        new=${list[ $RANDOM % ${#list[@]} ]}
    }

    for cmd in "$@"; do
        case "$cmd" in
            "next") _next ;;
            "prev") _prev ;;
            "random") _random ;;
        esac
    done

    cp "$CONF_GLOBAL" "$tmpfile"
    jq --arg new_file "$new" '.wallpaper = $new_file' "$tmpfile" > "$CONF_GLOBAL"
    sed -i "s/$current/$new/g" "$hyprconf"
    hyprctl hyprpaper unload all && killall hyprpaper; run hyprpaper
    exit 0
}


volume () {
	local current_volume cmd

	current_volume=$(amixer -D pulse sget Master | tail -1 | awk '{ print $5 }' | grep -o '[0-9]\+')

	for cmd in "$@"; do
		case "$cmd" in
			"inc") (( current_volume < 100 )) && pactl set-sink-volume 0 +2% ;;
			"dec") (( current_volume > 0 )) && pactl set-sink-volume 0 -2% ;;
			"mute") pactl set-sink-mute 0 toggle ;;
		esac
	done
}


screenshot () {
	local filename
	local notification=("Screenshot")
	
    filename="/tmp/$(date +'%Y%m%d-%H%M%S').png"
    trap 'rm -f $filename' EXIT
	
	_selection () {
		grim -g "$(slurp)" "$filename"
        wl-copy < "$filename"
        notification+=("Copied to clipboard.")
	}
			
	_fullscreen () { 
		grim "$filename"
        wl-copy < "$filename"
        notification+=("Copied to clipboard.")
	}

	for cmd in "$@"; do
		case "$cmd" in
			"select") _selection ;;
			"full") _fullscreen ;;
		esac
	done

	[[ "$*" =~ "-s" ]] || notify "${notification[@]}"
    exit 0
}


bar () {
	local notification=("Waybar")

	_start () {
        pidof -q waybar || run waybar
	}

	_stop () {
		pidof -q waybar && run killall waybar
	}

	_reload () {
		_stop
		sleep 0.7
		_start
		notification+=("Configuration reloaded.")
	}

	for cmd in "$@"; do
		case "$cmd" in
			"start") _start ;;
			"stop") _stop ;;
            "reload") _reload ;;
			"toggle")
                if pidof -q waybar; then
                    _stop
                else
                    _start
                fi ;;
            "") usage ;;
		esac
	done

	(( ${#notification[@]} > 1 )) && notify "${notification[@]}"
}


toggle_display () {
    local lockfile=/tmp/disp.lock
    [ -f $lockfile ] && exit 0

    local disp_state
    local notification=("DPMS")
    
    touch $lockfile
    trap 'rm -f $lockfile' EXIT

    disp_state=$(hyprctl monitors | awk '/dpmsStatus/ {print $NF}' | tail -1)
    if (( disp_state == 1 )); then
        notification+=("Killed display on DP-2.")
        sleep 0.5
        hyprctl dispatch dpms off DP-2
    else
        notification+=("Enabling display on DP-2.")
        sleep 0.5
        hyprctl dispatch dpms on DP-2
    fi

    [[ "$*" =~ '-s' ]] || notify "${notification[@]}"
    sleep 10
    exit 0
}

# Checks toggles in CONF_GLOBAL at boot, also bound to Mod+Shift+R
boot () {
	local toggles
	toggles=$(jq '.toggles' "$CONF_GLOBAL")

    local notification=("Hyprland")

	_run_enabled () {
		local toggle=$1
		local command=$2

		if [[ $(jq -r ".$toggle" <<< "$toggles") = true ]]; then
			mainctl "$command" start -s
		fi
	}

    [[ "$*" =~ "-s" ]] || hyprctl reload && sleep 0.3
	_run_enabled 'gamemode' 'gamemode'
	_run_enabled 'gammastep' 'gamma'

    [[ $(jq -r ".random_wp" <<< "$toggles") = true ]] && run mainctl wallpaper random

    notification+=("Reloaded global configuration.")
    [[ "$*" =~ "-s" ]] || notify "${notification[@]}"
    exit 0
}


main () {
	[ $# -lt 1 ] && usage

	args=("${@:2}")

	case "$1" in
		"gamma") gamma "${args[@]}" ;;
		"idle") idle "${args[@]}" ;;
		"gamemode") gamemode "${args[@]}" ;;
		"wallpaper") wallpaper "${args[@]}" ;;
		"volume") volume "${args[@]}" ;;
		"screenshot") screenshot "${args[@]}" ;;
		"waybar") bar "${args[@]}" ;;
        "display") toggle_display "${args[@]}" ;;
		"boot") boot "${args[@]}" ;;
	esac
}

main "$@"