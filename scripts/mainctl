#!/bin/bash
#    ___      ___
#   |"  \    /"  | ⊏
#    \   \  //   | ⊓
#    /\   \/.    | ⊐
#   |: \.        | ⊔
#   |.  \    /:  | ⊏
#   |___|\__/|___| ⊓
#
# shellcheck disable=SC1091

CONF_GLOBAL="$HOME/dotfiles/global.json"
CONF_PRIVATE="$HOME/dotfiles/private.json"

usage() {
	exit 0
}


notify() {
	notify-send "$1" "$2"
}


gamma() {
	local lock_file toggle_file notification

	lock_file="/tmp/gamma.lock"
	[ -f "$lock_file" ] && exit 1

	toggle_file="/tmp/gamma.toggle"
	notification=("Gammastep")

	_start() {
		pidof gammastep >/dev/null && exit 1
		touch "$lock_file"
		launch gammastep -t "$(jq '.gammastep.temp_day' "$CONF_GLOBAL"):$(jq '.gammastep.temp_night' "$CONF_GLOBAL")" -l "$(jq '.location.latitude' "$CONF_PRIVATE"):$(jq '.location.longtitude' "$CONF_PRIVATE")" 
		touch "$toggle_file"
		notification+=("Gammastep enabled.")
	}

	_stop() {
		pidof gammastep >/dev/null || exit 1
		touch "$lock_file"
		killall gammastep
		rm "$toggle_file"
		notification+=("Gammastep disabled.")
	}

	for cmd in "$@"; do
		[ "$cmd" = "start" ] && _start
		[ "$cmd" = "stop" ] && _stop
		[ "$cmd" = "toggle" ] && if pidof gammastep >/dev/null; then _stop; else _start; fi
	done

	[[ "$*" =~ "-s" ]] || notify "${notification[@]}"
	sleep 3
	rm "$lock_file"
}


idle() {
	local timeout notification
	notification=("Swayidle")

	_start() {
		pidof swayidle >/dev/null && exit 1
		timeout=$(jq '.swayidle.timeout' "$CONF_GLOBAL")
		on_idle=$(jq '.swayidle.actions.idle' "$CONF_GLOBAL")
		on_resume=$(jq '.swayidle.actions.resume' "$CONF_GLOBAL")
		swayidle timeout "$timeout" "$on_idle" resume "$on_resume" &
		notification+=("Swayidle enabled.")
	}

	_stop() {
		pidof swayidle >/dev/null || exit 1
		killall swayidle
		notification+=("Swayidle disabled.")
	}

	for cmd in "$@"; do
		case "$cmd" in
			"start") _start ;;
			"stop") _stop ;;
			"toggle") if pidof swayidle >/dev/null; then _stop; else _start; fi ;;
			*) usage ;;
		esac
	done

	[[ "$*" =~ '-s' ]] || notify "${notification[@]}"
}


gamemode() {
	local lock_file toggle_file notification

	lock_file="/tmp/gamemode.lock"
	[ -f "$lock_file" ] && exit 1

	toggle_file="/tmp/gamemode.toggle"
	notification=("Gamemode")

	_start() {
		[ -f "$toggle_file" ] && exit 1
		touch "$lock_file"
		launch hyprctl --batch "\
			keyword decoration:active_opacity 1;\
			keyword decoration:inactive_opacity 1;\
			keyword decoration:fullscreen_opacity 1;\
			keyword decoration:drop_shadow false;\
			keyword decoration:rounding 0;\
			keyword decoration:blur:enabled false;\
			keyword general:gaps_in 0;\
			keyword general:gaps_out 0"
		mainctl gamma stop -s
		mainctl idle stop -s
		touch "$toggle_file"
		notification+=("Gamemode enabled.")
	}

	_stop() {
		[ -f "$toggle_file" ] || exit 1
		touch "$lock_file"
		local active_opacity inactive_opacity fullscreen_opacity gaps_in gaps_out drop_shadow rounding blur c
		
		c=$(jq '.hyprland.decoration' "$CONF_GLOBAL")
		active_opacity=$(jq "$c.active_opacity" "$CONF_GLOBAL")
		inactive_opacity=$(jq "$c.inactive_opacity" "$CONF_GLOBAL")
		fullscreen_opacity=$(jq "$c.fullscreen_opacity" "$CONF_GLOBAL")
		drop_shadow=$(jq "$c.drop_shadow" "$CONF_GLOBAL")
		rounding=$(jq "$c.rounding" "$CONF_GLOBAL")
		blur=$(jq "$c.blur.enabled" "$CONF_GLOBAL")

		c=$(jq '.hyprland.general' "$CONF_GLOBAL")
		gaps_in=$(jq "$c.gaps_in" "$CONF_GLOBAL")
		gaps_out=$(jq "$c.gaps_out" "$CONF_GLOBAL")

		launch hyprctl --batch "\
			keyword decoration:active_opacity $active_opacity;\
			keyword decoration:inactive_opacity $inactive_opacity;\
			keyword decoration:fullscreen_opacity $fullscreen_opacity;\
			keyword decoration:drop_shadow $drop_shadow;\
			keyword decoration:blur:enabled $blur;\
			keyword decoration:rounding $rounding;\
			keyword general:gaps_in $gaps_in;\
			keyword general:gaps_out $gaps_out"
		mainctl idle start -s
		rm "$toggle_file"
		notification+=("Gamemode disabled.")
	}

	for cmd in "$@"; do
		case "$cmd" in
			"start") _start ;;
			"stop") _stop ;;
			"toggle") if [ -f "$toggle_file" ]; then _stop; else _start; fi ;;
			*) usage ;;
		esac
	done

	[[ "$*" =~ '-s' ]] || notify "${notification[@]}"
	sleep 3
	rm "$lock_file"
}


wallpaper() {
	local wp_folder random_wallpaper filename

	wp_folder="$HOME/Pictures/wallpapers"
	random_wallpaper=$(find "$wp_folder" -type f | shuf -n1)
	filename=$(basename "$random_wallpaper")

	cp "$wp_folder/$filename" "$wp_folder/.current/wallpaper.png"

	hyprctl hyprpaper unload all && \
	killall hyprpaper && \
	hyprpaper &
}


volume() {
	local current_volume

	current_volume=$(amixer -D pulse sget Master | tail -1 | cut -d '[' -f 2 | cut -d '%' -f 1)

	for cmd in "$@"; do
		case "$cmd" in
			"inc") [ "$current_volume" -lt 100 ] && pactl -- set-sink-volume 0 +2% ;;
			"dec") [ "$current_volume" -gt 0 ] && pactl -- set-sink-volume 0 -2% ;;
			"mute") pactl -- set-sink-mute 0 toggle ;;
			*) usage ;;
		esac
	done
}


screenshot() {
	local savedir filename notification

	savedir=/tmp
	filename="$savedir/$(date +'%Y%m%d-%H%M%S').png"
	notification=("Screenshot")
	 
	_selection() {
		if grim -g "$(slurp)" "$filename"; then
			wl-copy < "$filename"
			notification+=("Copied to clipboard.")
			exit 0
		fi
	}
			
	_fullscreen() { 
		if grim "$filename"; then
			wl-copy < "$filename"
			notification+=("Copied to clipboard.")
			exit 0
		fi
	}

	for cmd in "$@"; do
		case "$cmd" in
			"select") _selection ;;
			"full") _fullscreen ;;
			*) usage ;;
		esac
	done

	[[ "$*" =~ "-s" ]] || notify "${notification[@]}"
}


waybarctl() {
	case "$1" in
		"reset")
			if pidof "waybar"; then
				killall waybar
				sleep 0.2s
			fi
			launch waybar
			;;
		*) exit 1 ;;
	esac
}


main() {
	if [[ $# -lt 2 ]]; then
		echo "Invalid number of arguments"
		exit 1
	fi

	args=("${@:2}")

	case "$1" in
		"gamma") gamma "${args[@]}" ;;
		"idle") idle "${args[@]}" ;;
		"gamemode") gamemode "${args[@]}" ;;
		"wallpaper") wallpaper "${args[@]}" ;;
		"volume") volume "${args[@]}" ;;
		"screenshot") screenshot "${args[@]}" ;;
		"waybar") waybarctl "${args[@]}" ;;
		"help"|"-h"|*) usage ;;
	esac
}

main "$@"