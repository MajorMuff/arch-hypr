#!/bin/bash
#    ___      ___
#   |"  \    /"  | ⊏
#    \   \  //   | ⊓
#    /\   \/.    | ⊐
#   |: \.        | ⊔
#   |.  \    /:  | ⊏
#   |___|\__/|___| ⊓
#

CONF_GLOBAL="$HOME/dotfiles/global.json"
CONF_PRIVATE="$HOME/dotfiles/private.json"

usage() {
	printf "\n  Usage:   mainctl [module] [function] (opts)\n\n"
	printf "  gamma       [start|stop|toggle]    (-s)\n"
	printf "    \x1b[38;2;150;150;150mBlue light filter / \"night light\". (-s disables notifications)\x1b[0m\n\n"
	printf "  idle        [start|stop|toggle]    (-s)\n"
	printf "    \x1b[38;2;150;150;150mDisable displays when the user is idle. (-s disables notifications)\x1b[0m\n\n"
	printf "  gamemode    [start|stop|toggle]    (-s)\n"
	printf "    \x1b[38;2;150;150;150mDisable gaps, transparency, blur, and shadows. (-s disables notifications)\x1b[0m\n\n"
	printf "  volume      [inc|dec|mute]\n"
	printf "    \x1b[38;2;150;150;150mChange audio volume using pactl by 2 procent or mutes it using [mute] function.\x1b[0m\n\n"
	printf "  screenshot  [full|select]\n"
	printf "    \x1b[38;2;150;150;150mCreate screenshot and copies to clipboard. [full] for full screen, [select] for selection only.\x1b[0m\n\n"
	printf "  wallpaper\n"
	printf "    \x1b[38;2;150;150;150mSwitch to new (random) wallpaper from the ~/Pictures/wallpapers folder.\x1b[0m\n\n"
	printf "  help\n"
	printf "    \x1b[38;2;150;150;150mDisplays this information and exits.\n\n"
	exit 0
}


notify () {
	notify-send "$1" "$2"
}


gamma () {
	local lockfile notification cmd

	lockfile="/tmp/gamma.lock"
	[ -f "$lockfile" ] && exit 0

	notification=("Gammastep")

	_start () {
		pidof gammastep >/dev/null && exit 0
		touch "$lockfile"
		run gammastep -t "$(jq '.gammastep.temp_day' "$CONF_GLOBAL"):$(jq '.gammastep.temp_night' "$CONF_GLOBAL")" -l "$(jq '.location.latitude' "$CONF_PRIVATE"):$(jq '.location.longtitude' "$CONF_PRIVATE")" 
		cp -f "$CONF_GLOBAL" "$lockfile"
		jq '.toggles.gammastep = true' "$lockfile" > "$CONF_GLOBAL"
		notification+=("Gammastep enabled.")
	}

	_stop () {
		pidof gammastep >/dev/null || exit 0
		touch "$lockfile"
		killall gammastep
		cp -f "$CONF_GLOBAL" "$lockfile"
		jq '.toggles.gammastep = false' "$lockfile" > "$CONF_GLOBAL"
		notification+=("Gammastep disabled.")
	}

	for cmd in "$@"; do
		[ "$cmd" = "start" ] && _start
		[ "$cmd" = "stop" ] && _stop
		[ "$cmd" = "toggle" ] && if pidof gammastep >/dev/null; then _stop; else _start; fi
	done

	[[ "$*" =~ "-s" ]] || notify "${notification[@]}"
	sleep 3
	rm "$lockfile"
}


idle () {
	local timeout notification on_idle on_resume cmd
	notification=("Swayidle")

	_start () {
		pidof swayidle >/dev/null && exit 0
		timeout=$(jq '.swayidle.timeout' "$CONF_GLOBAL")
		on_idle=$(jq -r '.swayidle.actions.idle' "$CONF_GLOBAL")
		on_resume=$(jq -r '.swayidle.actions.resume' "$CONF_GLOBAL")
		swayidle timeout "$timeout" "$on_idle" resume "$on_resume" &
		notification+=("Swayidle enabled.")
	}

	_stop () {
		pidof swayidle >/dev/null || exit 0
		killall swayidle
		notification+=("Swayidle disabled.")
	}

	for cmd in "$@"; do
		case "$cmd" in
			"start") _start ;;
			"stop") _stop ;;
			"toggle") if pidof swayidle >/dev/null; then _stop; else _start; fi ;;
			*) usage ;;
		esac
	done

	[[ "$*" =~ '-s' ]] || notify "${notification[@]}"
}


gamemode () { # there has to be a cleaner way to do this, will look into it later
	local lockfile notification cmd

	lockfile="/tmp/gamemode.lock"
	[ -f "$lockfile" ] && exit 0

	notification=("Gamemode")

	_start () {
		touch "$lockfile"
		run hyprctl --batch "\
			keyword decoration:active_opacity 1;\
			keyword decoration:inactive_opacity 1;\
			keyword decoration:fullscreen_opacity 1;\
			keyword decoration:drop_shadow false;\
			keyword decoration:rounding 0;\
			keyword decoration:blur:enabled false;\
			keyword general:gaps_in 0;\
			keyword general:gaps_out 0"
		mainctl gamma stop -s
		mainctl idle stop -s
		cp -f "$CONF_GLOBAL" "$lockfile"
		jq '.toggles.gamemode = true' "$lockfile" > "$CONF_GLOBAL"
		sleep 3
		rm "$lockfile"
		notification+=("Gamemode enabled.")
	}

	_stop () {
		touch "$lockfile"
		local active_opacity inactive_opacity fullscreen_opacity gaps_in gaps_out drop_shadow rounding blur c
		
		c=$(jq '.hyprland.decoration' "$CONF_GLOBAL")
		active_opacity=$(jq "$c.active_opacity" "$CONF_GLOBAL")
		inactive_opacity=$(jq "$c.inactive_opacity" "$CONF_GLOBAL")
		fullscreen_opacity=$(jq "$c.fullscreen_opacity" "$CONF_GLOBAL")
		drop_shadow=$(jq "$c.drop_shadow" "$CONF_GLOBAL")
		rounding=$(jq "$c.rounding" "$CONF_GLOBAL")
		blur=$(jq "$c.blur.enabled" "$CONF_GLOBAL")

		c=$(jq '.hyprland.general' "$CONF_GLOBAL")
		gaps_in=$(jq "$c.gaps_in" "$CONF_GLOBAL")
		gaps_out=$(jq "$c.gaps_out" "$CONF_GLOBAL")

		run hyprctl --batch "\
			keyword decoration:active_opacity $active_opacity;\
			keyword decoration:inactive_opacity $inactive_opacity;\
			keyword decoration:fullscreen_opacity $fullscreen_opacity;\
			keyword decoration:drop_shadow $drop_shadow;\
			keyword decoration:blur:enabled $blur;\
			keyword decoration:rounding $rounding;\
			keyword general:gaps_in $gaps_in;\
			keyword general:gaps_out $gaps_out"
		mainctl idle start -s
		cp -f "$CONF_GLOBAL" "$lockfile"
		jq '.toggles.gamemode = false' "$lockfile" > "$CONF_GLOBAL"
		sleep 3
		rm "$lockfile"
		notification+=("Gamemode disabled.")
	}

	for cmd in "$@"; do
		case "$cmd" in
			"start") _start ;;
			"stop") _stop ;;
			"toggle")
				if [ "$(jq -r ".toggles.gamemode" "$CONF_GLOBAL")" = "true" ]; then
					_stop
				else
					_start
				fi ;;
			*) usage ;;
		esac
	done

	[[ "$*" =~ '-s' ]] || notify "${notification[@]}"
}


wallpaper () {
	local folder listfile current tmpfile num j cmd

	folder="$HOME/Pictures/wallpapers"
	listfile="$folder/.list"
	ls -1 "$folder" > "$folder/.list"
	current=$(jq -r '.hyprland.wallpaper' "$CONF_GLOBAL")
	mapfile -t list < "$listfile"

	_done () {
		tmpfile=$(mktemp)
		cp "$CONF_GLOBAL" "$tmpfile" &&
		jq --arg new_file "$@" '.hyprland.wallpaper = $new_file' "$tmpfile" > "$CONF_GLOBAL"
		cp -f "$folder/$*" "$folder/.wallpaper.png"
		rm "$tmpfile"
		hyprctl hyprpaper unload all && killall hyprpaper; run hyprpaper
		exit 0
	}

	_next () {
		num=${#list[@]}
		j=$(( num-1 ))
		for ((i=0;i<=j;i++)); do
			if [ "${list[i]}" = "$current" ]; then
				if [ $i -eq $j ]; then
					i=0
				else
					(( i++ ))
				fi
				_done "${list[i]}"
			fi
		done
	}

	_prev () {
		num=${#list[@]}
		j=$(( num-1 ))
		for ((i=j;i>=0;i--)); do
			if [ "${list[i]}" = "$current" ]; then
				if [ $i -eq 0 ]; then
					i=$j
				else
					(( i-- ))
				fi
				_done "${list[i]}"
			fi
		done
	}

	for cmd in "$@"; do
		case "$cmd" in
			"next") _next ;;
			"prev") _prev ;;
			*) usage ;;
		esac
	done	

	
}


volume () {
	local current_volume cmd

	current_volume=$(amixer -D pulse sget Master | tail -1 | cut -d '[' -f 2 | cut -d '%' -f 1)

	for cmd in "$@"; do
		case "$cmd" in
			"inc") [ "$current_volume" -lt 100 ] && pactl -- set-sink-volume 0 +2% ;;
			"dec") [ "$current_volume" -gt 0 ] && pactl -- set-sink-volume 0 -2% ;;
			"mute") pactl -- set-sink-mute 0 toggle ;;
			*) usage ;;
		esac
	done
}


screenshot () {
	local savedir filename notification cmd

	savedir=/tmp
	filename="$savedir/$(date +'%Y%m%d-%H%M%S').png"
	notification=("Screenshot")
	 
	_selection () {
		if grim -g "$(slurp)" "$filename"; then
			wl-copy < "$filename"
			notification+=("Copied to clipboard.")
		fi
	}
			
	_fullscreen () { 
		if grim "$filename"; then
			wl-copy < "$filename"
			notification+=("Copied to clipboard.")
		fi
	}

	for cmd in "$@"; do
		case "$cmd" in
			"select") _selection ;;
			"full") _fullscreen ;;
			*) usage ;;
		esac
	done

	[[ "$*" =~ "-s" ]] || notify "${notification[@]}"
}


bar () {
	local notification cmd
	
	notification=("Waybar")

	_start () {
		pidof waybar >/dev/null || run waybar
	}

	_stop () {
		pidof waybar >/dev/null && run killall waybar
	}

	for cmd in "$@"; do
		case "$cmd" in
			"start") _start ;;
			"stop") _stop ;;
			"toggle") if pidof waybar >/dev/null; then _stop; else _start; fi ;;
			"reload") _stop; sleep 0.7; _start; notification+=("Configuration reloaded.") ;;
			*) usage ;;
		esac
	done

	[ ${#notification[@]} -gt 1 ] && notify "${notification[@]}"
}


boot() {
	[ "$(jq -r '.toggles.gamemode' "$CONF_GLOBAL")" = true ] && mainctl gamemode start -s
	[ "$(jq -r '.toggles.gammastep' "$CONF_GLOBAL")" = true ] && mainctl gamma start -s
}


main () {
	[ $# -lt 1 ] && usage

	args=("${@:2}")

	case "$1" in
		"gamma") gamma "${args[@]}" ;;
		"idle") idle "${args[@]}" ;;
		"gamemode") gamemode "${args[@]}" ;;
		"wallpaper") wallpaper "${args[@]}" ;;
		"volume") volume "${args[@]}" ;;
		"screenshot") screenshot "${args[@]}" ;;
		"waybar") bar "${args[@]}" ;;
		"boot") boot ;;
		"help"|"-h"|""|*) usage ;;
	esac
}

main "$@"