#!/bin/bash
#    ___      ___
#   |"  \    /"  | ⊏
#    \   \  //   | ⊓
#    /\   \/.    | ⊐
#   |: \.        | ⊔
#   |.  \    /:  | ⊏
#   |___|\__/|___| ⊓
#
#   Usage: mainctl [OPTION] (ARGS)
#     --gamemode            toggles opacity and blur for all active windows
#     --gammastep           toggles gammastep on/off
#     --swayidle            starts swayidle process to turn off displays after inactivity
#     --wallpaper           chooses new random wallpaper and restarts hyprpaper
#     --volume [ARG]        allows volume control
#       -i                  increase volume by 2 percent
#       -d                  decrease volume by 2 percent
#       -m                  mute volume
#     --screenshot [ARG]    creates screenshot and copies it to the clipboard
#       -f                  fullscreen screenshot
#       -s                  selection screenshot
#
#     --help                show this information and exit


CONF_GLOBAL="$HOME/dotfiles/global.json"
CONF_PRIVATE="$HOME/dotfiles/private.json"


usage() {
	printf "\n  Usage: mainctl [OPTION] (ARGS)\n\n"
	printf "    --gamemode            toggles opacity and blur for all active windows\n"
	printf "    --gammastep           toggles gammastep on/off\n"
	printf "    --swayidle            starts swayidle process to turn off displays after inactivity\n"
	printf "    --wallpaper           chooses new random wallpaper and restarts hyprpaper\n"
	printf "    --volume [ARG]        allows volume control\n"
	printf "      -i                  increase volume by 2 percent\n"
	printf "      -d                  decrease volume by 2 percent\n"
	printf "      -m                  mute volume\n"
	printf "    --screenshot [ARG]    creates screenshot and copies it to the clipboard\n"
	printf "      -f                  fullscreen screenshot\n"
	printf "      -s                  selection screenshot\n"
	printf "\n"
	printf "    --help                show this information and exit\n"
	printf "\n"
}


notify() {
	local title message

	title=$(awk '{ print $1 }' <<< "$1")
	message=$(awk '{ for (i=2; i<=NF; i++) printf $i " " }' <<< "$1")

	notify-send "$title" "$message"
}


gamma() {
	local lock_file notification

	lock_file="/tmp/gamma.lock"
	[[ -f "$lock_file" ]] && exit 1

	toggle_file="/tmp/gamma.toggle"
	notification="Gammastep "

	gamma_start() {
		if pidof gammastep >/dev/null; then exit 1; fi
		touch "$lock_file"
		launch gammastep \
			-t "$(jq '.gammastep.temp_day' "$CONF_GLOBAL"):$(jq '.gammastep.temp_night' "$CONF_GLOBAL")" \
			-l "$(jq '.location.latitude' "$CONF_PRIVATE"):$(jq '.location.longtitude' "$CONF_PRIVATE")"
			touch "$toggle_file"
			notification+="Gammastep enabled."
	}

	gamma_stop() {
		if ! pidof gammastep >/dev/null; then exit 1; fi
		touch "$lock_file"
		killall gammastep
		rm "$toggle_file"
		notification+="Gammastep disabled."
	}

	if [[ "$*" =~ "start" ]]; then gamma_start
	elif [[ "$*" =~ "stop" ]]; then gamma_stop
	elif [[ "$*" =~ "toggle" ]]; then
		if pidof gammastep >/dev/null; then
			gamma_stop
		else
			gamma_start
		fi
	fi

	[[ ! "$*" =~ "-s" ]] && notify "$notification"
	sleep 3
	rm "$lock_file"
}


idle() {
	if pidof swayidle >/dev/null; then exit 1; fi

	timeout=$(jq '.swayidle.timeout' "$CONF_GLOBAL")
	
	swayidle timeout "$timeout" 'hyprctl dispatch dpms off DP-2; hyprctl dispatch dpms off DP-1' \
		resume 'hyprctl dispatch dpms on DP-1; hyprctl dispatch dpms on DP-2' &
}


gamemode() {
	local lock_file toggle_file notification

	lock_file="/tmp/gamemode.lock"
	[[ -f "$lock_file" ]] && exit 1

	toggle_file="/tmp/gamemode.toggle"
	notification="Gamemode "

	gamemode_stop() {
		[[ ! -f "$toggle_file" ]] && exit 1
		touch "$lock_file"
		local active_opacity inactive_opacity fullscreen_opacity gaps_in gaps_out drop_shadow rounding blur c
		
		c=$(jq '.hyprland.decoration' "$CONF_GLOBAL")
		active_opacity=$(jq "$c.active_opacity" "$CONF_GLOBAL")
		inactive_opacity=$(jq "$c.inactive_opacity" "$CONF_GLOBAL")
		fullscreen_opacity=$(jq "$c.fullscreen_opacity" "$CONF_GLOBAL")
		drop_shadow=$(jq "$c.drop_shadow" "$CONF_GLOBAL")
		rounding=$(jq "$c.rounding" "$CONF_GLOBAL")
		blur=$(jq "$c.blur.enabled" "$CONF_GLOBAL")

		c=$(jq '.hyprland.general' "$CONF_GLOBAL")
		gaps_in=$(jq "$c.gaps_in" "$CONF_GLOBAL")
		gaps_out=$(jq "$c.gaps_out" "$CONF_GLOBAL")

		hyprctl --batch "\
			keyword decoration:active_opacity $active_opacity;\
			keyword decoration:inactive_opacity $inactive_opacity;\
			keyword decoration:fullscreen_opacity $fullscreen_opacity;\
			keyword decoration:drop_shadow $drop_shadow;\
			keyword decoration:blur:enabled $blur;\
			keyword decoration:rounding $rounding;\
			keyword general:gaps_in $gaps_in;\
			keyword general:gaps_out $gaps_out"

		idle
		rm "$toggle_file"
		notification+="Gamemode disabled."
	}

	gamemode_start() {
		[[ -f "$toggle_file" ]] && exit 1
		touch "$lock_file"
		hyprctl --batch "\
			keyword decoration:active_opacity 1;\
			keyword decoration:inactive_opacity 1;\
			keyword decoration:fullscreen_opacity 1;\
			keyword decoration:drop_shadow false;\
			keyword decoration:rounding 0;\
			keyword decoration:blur:enabled false;\
			keyword general:gaps_in 0;\
			keyword general:gaps_out 0"
		killall swayidle
		touch "$toggle_file"
		notification+="Gamemode enabled."
	}

	if [[ "$*" =~ "start" ]]; then gamemode_start
	elif [[ "$*" =~ "stop" ]]; then gamemode_stop
	elif [[ "$*" =~ "toggle" ]]; then
		if [ -f "$toggle_file" ]; then
			gamemode_stop
		else
			gamemode_start
		fi
	fi

	[[ ! "$*" =~ "-s" ]] && notify "$notification"
	sleep 2
	rm "$lock_file"
}


wallpaper() {
	local wp_folder random_wallpaper filename

	wp_folder="$HOME/Pictures/wallpapers"
	random_wallpaper=$(find "$wp_folder" -type f | shuf -n1)
	filename=$(basename "$random_wallpaper")

	cp "$wp_folder/$filename" "$wp_folder/.current/wallpaper.png"

	hyprctl hyprpaper unload all &&
	killall hyprpaper &&
	hyprpaper &
}


volume() {
	case "$1" in
		"-i")
			if [ ! "$(amixer -D pulse sget Master | tail -1 | cut -d '[' -f 2 | cut -d '%' -f 1)" -ge 100 ]; then
				pactl -- set-sink-volume 0 +2%
			fi
			;;
			
		"-d")
			if [ ! "$(amixer -D pulse sget Master | tail -1 | cut -d '[' -f 2 | cut -d '%' -f 1)" -le 0 ]; then
				pactl -- set-sink-volume 0 -2%
			fi
			;;
			
		"-m")
			pactl -- set-sink-mute 0 toggle
			;;
	esac
}


screenshot() {
	local savedir filename

	savedir=/tmp
	filename="$savedir/$(date +'%Y%m%d-%H%M%S').png"
	notification="Screenshot "
	 
	shot_selection() {
		if grim -g "$(slurp)" "$filename"; then
			wl-copy < "$filename"
			notification+="Copied to clipboard."
			exit 0
		fi
	}
			
	shot_fullscreen() { 
		if grim "$filename"; then
			wl-copy < "$filename"
			notification+="Copied to clipboard."
			exit 0
		fi
	}

	case "$1" in
		"-s") shot_selection ;;
		"-f") shot_fullscreen ;;
	esac

	notify "$notification"
}


waybarctl() {
	case "$1" in
		"reset")
			if pidof "waybar"; then
				killall waybar
				sleep 0.2s
			fi
			launch waybar
			;;
		*)
			exit 1;
	esac
}


main() {
	if [[ $# -lt 2 ]] || [[ $# -gt 4 ]]; then
		echo "Invalid number of arguments"
		exit 1
	fi

	args=("${@:2}")

	case "$1" in
		"gammastep") gamma "${args[@]}" ;;
		"swayidle") idle ;;
		"gamemode") gamemode "${args[@]}";;
		"wallpaper") wallpaper ;;
		"volume") volume "$2" ;;
		"screenshot") screenshot "$2" ;;
		"waybar") waybarctl "$2" ;;
		"help"|*) usage ;;
	esac
}

main "$@"